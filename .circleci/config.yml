# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  node: circleci/node@4.1
parameters:
  circle_wf_id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       circle_wf_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.circle_wf_id>> "
            aws cloudformation delete-stack --stack-name Udapeople-backend-<<parameters.circle_wf_id>>
            aws s3 rm s3://udapeople-udap-<<parameters.circle_wf_id>> --recursive
            aws cloudformation delete-stack --stack-name Udapeople-frontend-<<parameters.circle_wf_id>>
        

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo "Creating Swapna Frontend!"
            cd frontend
            npm i
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
           echo "Creating Swapna Backend!"
           cd backend
           npm i
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            echo "Testing Swapna Frontend!"
            cd frontend
            npm i
            npm test
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
           echo "Testing Swapna Backend!"
           cd backend
           npm i
           npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            echo "Scanning Swapna Frontend!"
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

            
                
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
           echo "Scanning Swapna Backend!"
           cd backend
           npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople\
              --stack-name Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name Udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}"   
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLICIP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLICIP:3030" > ~/output.txt
            echo "$BACKEND_AWS_PUBLICIP" >> .circleci/ansible/inventory.txt                 
            cat ~/output.txt 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt
      # Here's where you will add some code to rollback on 
      - destroy-environment:
          circle_wf_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["9a:28:99:3f:a5:a0:1c:c3:c9:57:7c:9d:ba:14:9c:d6"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
           apk add --update ansible  
      - run:
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml            
            cat backend/.env
            ls backend
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            cat .env
            npm run migrations > migration_status.txt
            cat migration_status.txt
     
      - destroy-environment:
          circle_wf_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          

  deploy-frontend:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
           
            # apk add --update curl nodejs npm
            # apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"

      - run:
          name: Deploy frontend objects
          command: |
           cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: copy frontend package to aws s3 bucket
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-udap-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          circle_wf_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["9a:28:99:3f:a5:a0:1c:c3:c9:57:7c:9d:ba:14:9c:d6"]
      - attach_workspace:
          at: ~/
      - run: 
         name: Install dependencies
         command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            apk add --update openssh-client tar gzip
            pip install awscli
      - run:
         name: Build backend app
         command: |
           cd ~/project/backend
            ls
            cd ../
            cd backend/ && tar -zcvf ../backend.tar.gz . && cd - 
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/node-explorer.yml
      - destroy-environment:
          circle_wf_id: "${CIRCLE_WORKFLOW_ID:0:7}"

               

 
  
  

workflows:
  sample:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
             - build-frontend
      - test-backend:
          requires:
             - build-backend
      - scan-frontend:
          requires:
             - build-frontend
      - scan-backend:
          requires:
             - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [circleci-editor/master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
