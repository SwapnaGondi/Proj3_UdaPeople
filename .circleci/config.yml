# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo "Creating Swapna Frontend!"
            cd frontend
            npm i
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
           echo "Creating Swapna Backend!"
           cd backend
           npm i
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            echo "Testing Swapna Frontend!"
            cd frontend
            npm i
            npm test
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
           echo "Testing Swapna Backend!"
           cd backend
           npm i
           npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            echo "Scanning Swapna Frontend!"
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

            
                
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
           echo "Scanning Swapna Backend!"
           cd backend
           npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople\
              --stack-name Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}" 
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name Udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="udap-${CIRCLE_WORKFLOW_ID:0:7}"   
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLICIP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLICIP:3030" > ~/output.txt
            echo "$BACKEND_AWS_PUBLICIP" >> .circleci/ansible/inventory.txt                 
            cat ~/output.txt 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt
      # Here's where you will add some code to rollback on failure                 

 
  
  

workflows:
  sample:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
             - build-frontend
      - test-backend:
          requires:
             - build-backend
      - scan-frontend:
          requires:
             - build-frontend
      - scan-backend:
          requires:
             - build-backend

      